---
title: "ID_grid"
author: "Jerónimo Rodríguez-Escobar"
format: html
editor: visual
---


# 1. Join Country Data (improve Analysis)

## 1.1. Rasterize Country Data to the ESA LC

```{python add country data}
#| echo: true
import geopandas as gpd
import rasterio
from rasterio import features
from rasterio.windows import Window
import numpy as np
from tqdm import tqdm  # <-- add this

# -------------------------------------
# CONFIG
# -------------------------------------
countries_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/global_ES_TimeSeries/vector/cartographic_ee_ee_r264_correspondence.gpkg"
esa_raster_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/global_NCP/data/input_rasters/LandCovers/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2020-v2.1.1_md5_2ed6285e6f8ec1e7e0b75309cc6d6f9f.tif"
output_raster_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/Raster/countries_fid_300m_COMPRESSED.tif"
updated_countries_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/ee_r264_correspondence_fid.gpkg"

# -------------------------------------
# 1. Load Countries & Add fid Column
# -------------------------------------
countries = gpd.read_file(countries_fp).reset_index(drop=True)
countries["fid"] = countries.index  # Explicit integer ID

# Save updated vector file for future use
countries[
    ["fid", *[c for c in countries.columns if c not in ["fid", "geometry"]], "geometry"]
].to_file(updated_countries_fp, driver="GPKG")

print(f"✓ Updated countries saved with fid column to {updated_countries_fp}")

# Keep only fid + geometry for rasterization
countries = countries[["fid", "geometry"]]

# -------------------------------------
# 2. Load reference raster
# -------------------------------------
with rasterio.open(esa_raster_fp) as ref_raster:
    meta = ref_raster.meta.copy()
    transform = ref_raster.transform
    crs = ref_raster.crs
    height, width = ref_raster.height, ref_raster.width

# -------------------------------------
# 3. Reproject countries to raster CRS
# -------------------------------------
countries = countries.to_crs(crs)

# -------------------------------------
# 4. Prepare shapes for rasterization
# -------------------------------------
shapes = [(geom, int(fid)) for fid, geom in zip(countries["fid"], countries.geometry)]

# Update metadata to use compression
meta.update(
    dtype=rasterio.int32,
    count=1,
    nodata=-1,
    compress="DEFLATE",  # lossless compression
    predictor=2,         # improves compression for continuous data
    zlevel=6             # compression level (1–9, trade-off size/speed)
)

with rasterio.open(output_raster_fp, "w", **meta) as dst:
    tile_height, tile_width = 2000, 2000  # Adjust chunk size

    for row_off in tqdm(range(0, height, tile_height)):
        for col_off in range(0, width, tile_width):
            win = Window(
                col_off,
                row_off,
                min(tile_width, width - col_off),
                min(tile_height, height - row_off),
            )

            win_transform = rasterio.windows.transform(win, transform)

            raster_chunk = features.rasterize(
                shapes=shapes,
                out_shape=(win.height, win.width),
                transform=win_transform,
                fill=-1,
                dtype=np.int32,
            )

            dst.write(raster_chunk, 1, window=win)

print(f"✓ Compressed raster saved to {output_raster_fp}")

```


## 1.2. Assign Country Fid to the Grid

```{python assign ID}

import geopandas as gpd
import rasterio
from rasterio import features
from rasterio.transform import from_origin
import numpy as np
from pathlib import Path

# -----------------------------
# CONFIG
# -----------------------------
countries_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/global_ES_TimeSeries/vector/cartographic_ee_ee_r264_correspondence.gpkg"
output_raster_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/Raster/countries_fid_5km_COMPRESSED.tif"
updated_countries_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/ee_r264_correspondence_fid.gpkg"

# -----------------------------
# 1. Load countries & add fid
# -----------------------------
countries = gpd.read_file(countries_fp).reset_index(drop=True)
countries["fid"] = countries.index  # Explicit integer ID

# Save updated version (so fid is always available in future runs)
# countries.to_file(updated_countries_fp, driver="GPKG")
# print(f"✓ Updated countries saved with fid column to {updated_countries_fp}")

# Keep only necessary columns
countries = countries[["fid", "geometry"]]

# -----------------------------
# 2. Create 10 km reference raster (WGS84)
# -----------------------------
xmin, ymin, xmax, ymax = -180, -90, 180, 90
resolution = 0.05  # ~10 km at equator
width = int((xmax - xmin) / resolution)
height = int((ymax - ymin) / resolution)

transform = from_origin(xmin, ymax, resolution, resolution)

meta = {
    "driver": "GTiff",
    "dtype": rasterio.int32,
    "count": 1,
    "width": width,
    "height": height,
    "crs": "EPSG:4326",
    "transform": transform,
    "nodata": -1,
    "compress": "DEFLATE",  # lossless compression
    "predictor": 2,
    "zlevel": 6
}

# -----------------------------
# 3. Rasterize
# -----------------------------
shapes = [(geom, int(fid)) for fid, geom in zip(countries["fid"], countries.geometry)]

with rasterio.open(output_raster_fp, "w", **meta) as dst:
    rasterized = features.rasterize(
        shapes=shapes,
        out_shape=(height, width),
        transform=transform,
        fill=-1,
        dtype=np.int32
    )
    dst.write(rasterized, 1)

print(f"✓ Compressed 10 km raster saved to {output_raster_fp}")


```

## 1.3 Assign Id to 10 km grid

```{python alicate ids to grid}

import geopandas as gpd
import rasterio
import pandas as pd

# Paths
grid_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/grid10_km_c.gpkg"
raster_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/Raster/countries_fid_5km_COMPRESSED.tif"
output_fp = "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/grid10_km_c2.gpkg"
# Load grid
grid = gpd.read_file(grid_fp)

# Compute centroids
grid_centroids = grid.copy()
grid_centroids["geometry"] = grid_centroids.centroid

# Open raster
with rasterio.open(raster_fp) as src:
    coords = [(geom.x, geom.y) for geom in grid_centroids.geometry]
    values = list(src.sample(coords))
    values = [int(v[0]) if v[0] != src.nodata else None for v in values]

# Add country_fid column
grid["country_fid"] = values

# Save
grid.to_file(output_fp, driver="GPKG")
print(f"✓ Grid with country_fid saved to {output_fp}")
```


# Final Edits/cleaning

Some fixzes to column nam,es because of course
```{r wrf}

grid10 <- st_read("/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/grid10_km_c.gpkg")


sf_f <- st_read(paste0(inpath,'/', '10k_grid_ES_change_benef.gpkg'))
sf_f <- sf_f %>% mutate(fid = dplyr::row_number())
grid10 <- grid10 %>% mutate(fid= dplyr::row_number())

grid10 <- grid10 %>% filter(!is.na(country_fid))
grid10 <- st_drop_geometry(grid10)

sf_f <- left_join(sf_f, grid10)
sf_f <- rename(sf_f, c_fid = country_fid)

st_write(sf_f, paste0(inpath, '/', '10k_grid_ES_change_benef.gpkg'), append=FALSE)
st_write(grid10, "/Users/rodriguez/Library/CloudStorage/OneDrive-WorldWildlifeFund,Inc/Ref_Data/vector/grid10_km_c.gpkg", append=FALSE)


```