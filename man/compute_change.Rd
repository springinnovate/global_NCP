% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pct_change_calc.R
\name{compute_change}
\alias{compute_change}
\title{Compute Absolute and/or Percentage Change Between Two Time Points}
\usage{
compute_change(
  df,
  suffix = c("_sum", "_mean"),
  round_digits = NULL,
  drop_columns = FALSE,
  change_type = c("both", "pct", "abs")
)
}
\arguments{
\item{df}{A \code{data.frame} or \code{sf} object with time-stamped variable columns.}

\item{suffix}{A character vector of valid suffixes (e.g., \code{c("_sum", "_mean")}).
Used to detect columns to compare. Defaults to \code{c("_sum", "_mean")}.}

\item{round_digits}{Integer. If specified, will round the computed values to this number of digits. Default is \code{NULL} (no rounding).}

\item{drop_columns}{Logical. If \code{TRUE}, drops all original columns except for \code{"fid"}, computed change columns, and geometry. Default is \code{FALSE}.}

\item{change_type}{Type of change to compute. One of \code{"pct"} (percentage), \code{"abs"} (absolute), or \code{"both"} (default).}
}
\value{
A \code{data.frame} or \code{sf} object with added change columns. If \code{drop_columns = TRUE}, only \code{"fid"}, the computed columns, and geometry are kept.
}
\description{
This function computes absolute and/or percentage change between two time points
for variables that follow a specific naming convention: \code{"variable_YYYY_suffix"},
where \code{variable} is the service name or indicator, \code{YYYY} is a 4-digit year,
and \code{suffix} is a known ending such as \code{"_sum"} or \code{"_mean"}.
}
\details{
The function detects variable-year pairs based on matching variable prefixes and suffixes.
It supports multiple suffix types and returns either absolute change, percentage change,
or both.
}
\examples{
# Default use: computes both pct and abs changes for _sum and _mean columns
compute_variable_change(df)

# Compute only percentage change
compute_variable_change(df, change_type = "pct")

# Compute only absolute change and round to 2 digits
compute_variable_change(df, change_type = "abs", round_digits = 2)

# Use custom suffix (e.g., "_total")
compute_variable_change(df, suffix = "_total", change_type = "both")
}
